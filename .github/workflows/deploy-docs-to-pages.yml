# =============================================================================
# Deploy AI-Generated Documentation to GitHub Pages (Fixed Version)
# =============================================================================
# 
# This workflow automatically deploys AI-generated documentation to GitHub Pages
# using a Python-based static site generator for better reliability.
# 
# =============================================================================

name: 📚 Deploy Documentation to GitHub Pages

on:
  # Deploy when documentation is updated
  push:
    branches: [ main ]
    paths:
      - 'docs/**'
      - '*.md'
      - '.github/workflows/ai-documentation-generator.yml'
      - '.github/workflows/deploy-docs-to-pages.yml'
  
  # Allow manual deployment
  workflow_dispatch:

# Set permissions for GitHub Pages deployment
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # =============================================================================
  # JOB 1: Build Documentation Website
  # =============================================================================
  build:
    name: 🏗️ Build Documentation Site
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: 📦 Install Python Dependencies
        run: |
          pip install --upgrade pip
          pip install markdown jinja2 pygments pyyaml pathlib2
      
      - name: 🏗️ Build Documentation Site
        run: |
          # Create Python documentation builder script
          cat > build_docs.py << 'EOF'
          #!/usr/bin/env python3
          """
          SentinelBERT Documentation Site Builder
          
          This script converts Markdown documentation to a beautiful static website
          optimized for GitHub Pages deployment.
          """
          
          import os
          import glob
          import markdown
          from pathlib import Path
          from jinja2 import Template
          import shutil
          from datetime import datetime
          
          # Create output directory
          os.makedirs('dist', exist_ok=True)
          os.makedirs('dist/assets', exist_ok=True)
          
          # HTML Template
          html_template = """
          <!DOCTYPE html>
          <html lang="en">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>{{ title }} - SentinelBERT Documentation</title>
              <meta name="description" content="{{ description }}">
              
              <!-- Styles -->
              <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/themes/prism-tomorrow.min.css">
              <link rel="stylesheet" href="assets/style.css">
              
              <!-- Favicon -->
              <link rel="icon" type="image/svg+xml" href="data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100'><text y='.9em' font-size='90'>🤖</text></svg>">
          </head>
          <body>
              <div class="container">
                  <nav class="sidebar">
                      <div class="sidebar-header">
                          <h1>🤖 SentinelBERT</h1>
                          <p>AI-Powered Social Media Analysis</p>
                      </div>
                      <div class="nav-menu">
                          {{ navigation }}
                      </div>
                  </nav>
                  
                  <main class="content">
                      <div class="content-header">
                          <h1>{{ title }}</h1>
                          <div class="breadcrumb">Documentation > {{ title }}</div>
                      </div>
                      
                      <article class="markdown-content">
                          {{ content }}
                      </article>
                      
                      <footer class="content-footer">
                          <p>Generated by SentinelBERT AI Documentation System</p>
                          <p>Last updated: {{ timestamp }}</p>
                      </footer>
                  </main>
              </div>
              
              <!-- Scripts -->
              <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-core.min.js"></script>
              <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/plugins/autoloader/prism-autoloader.min.js"></script>
              <script src="assets/script.js"></script>
          </body>
          </html>
          """
          
          # CSS Styles
          css_content = """
          :root {
              --primary-color: #2563eb;
              --secondary-color: #64748b;
              --background-color: #ffffff;
              --surface-color: #f8fafc;
              --text-color: #1e293b;
              --text-muted: #64748b;
              --border-color: #e2e8f0;
              --code-background: #f1f5f9;
              --sidebar-width: 280px;
          }
          
          [data-theme="dark"] {
              --background-color: #0f172a;
              --surface-color: #1e293b;
              --text-color: #f1f5f9;
              --text-muted: #94a3b8;
              --border-color: #334155;
              --code-background: #1e293b;
          }
          
          * {
              margin: 0;
              padding: 0;
              box-sizing: border-box;
          }
          
          body {
              font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
              background-color: var(--background-color);
              color: var(--text-color);
              line-height: 1.6;
          }
          
          .container {
              display: flex;
              min-height: 100vh;
          }
          
          .sidebar {
              width: var(--sidebar-width);
              background-color: var(--surface-color);
              border-right: 1px solid var(--border-color);
              position: fixed;
              height: 100vh;
              overflow-y: auto;
              z-index: 100;
          }
          
          .sidebar-header {
              padding: 2rem 1.5rem;
              border-bottom: 1px solid var(--border-color);
          }
          
          .sidebar-header h1 {
              font-size: 1.5rem;
              font-weight: 700;
              color: var(--primary-color);
              margin-bottom: 0.5rem;
          }
          
          .sidebar-header p {
              color: var(--text-muted);
              font-size: 0.875rem;
          }
          
          .nav-menu {
              padding: 1rem 0;
          }
          
          .nav-menu a {
              display: block;
              padding: 0.75rem 1.5rem;
              color: var(--text-color);
              text-decoration: none;
              border-left: 3px solid transparent;
              transition: all 0.2s;
          }
          
          .nav-menu a:hover {
              background-color: var(--code-background);
              border-left-color: var(--primary-color);
          }
          
          .nav-menu a.active {
              background-color: var(--code-background);
              border-left-color: var(--primary-color);
              font-weight: 600;
          }
          
          .content {
              flex: 1;
              margin-left: var(--sidebar-width);
              padding: 2rem;
              max-width: calc(100vw - var(--sidebar-width));
          }
          
          .content-header {
              margin-bottom: 2rem;
              padding-bottom: 1rem;
              border-bottom: 1px solid var(--border-color);
          }
          
          .content-header h1 {
              font-size: 2.5rem;
              font-weight: 700;
              margin-bottom: 0.5rem;
          }
          
          .breadcrumb {
              color: var(--text-muted);
              font-size: 0.875rem;
          }
          
          .markdown-content {
              max-width: none;
          }
          
          .markdown-content h1,
          .markdown-content h2,
          .markdown-content h3,
          .markdown-content h4,
          .markdown-content h5,
          .markdown-content h6 {
              margin-top: 2rem;
              margin-bottom: 1rem;
              font-weight: 600;
              line-height: 1.25;
          }
          
          .markdown-content h1 { font-size: 2rem; }
          .markdown-content h2 { font-size: 1.5rem; }
          .markdown-content h3 { font-size: 1.25rem; }
          .markdown-content h4 { font-size: 1.125rem; }
          
          .markdown-content p {
              margin-bottom: 1rem;
          }
          
          .markdown-content ul,
          .markdown-content ol {
              margin-bottom: 1rem;
              padding-left: 2rem;
          }
          
          .markdown-content li {
              margin-bottom: 0.5rem;
          }
          
          .markdown-content code {
              background-color: var(--code-background);
              padding: 0.25rem 0.5rem;
              border-radius: 0.25rem;
              font-size: 0.875rem;
              font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
          }
          
          .markdown-content pre {
              background-color: var(--code-background);
              padding: 1rem;
              border-radius: 0.5rem;
              overflow-x: auto;
              margin-bottom: 1rem;
          }
          
          .markdown-content pre code {
              background: none;
              padding: 0;
          }
          
          .markdown-content blockquote {
              border-left: 4px solid var(--primary-color);
              padding-left: 1rem;
              margin: 1rem 0;
              color: var(--text-muted);
              font-style: italic;
          }
          
          .markdown-content table {
              width: 100%;
              border-collapse: collapse;
              margin-bottom: 1rem;
          }
          
          .markdown-content th,
          .markdown-content td {
              padding: 0.75rem;
              border: 1px solid var(--border-color);
              text-align: left;
          }
          
          .markdown-content th {
              background-color: var(--surface-color);
              font-weight: 600;
          }
          
          .content-footer {
              margin-top: 4rem;
              padding-top: 2rem;
              border-top: 1px solid var(--border-color);
              color: var(--text-muted);
              font-size: 0.875rem;
              text-align: center;
          }
          
          @media (max-width: 768px) {
              .sidebar {
                  transform: translateX(-100%);
                  transition: transform 0.3s;
              }
              
              .sidebar.open {
                  transform: translateX(0);
              }
              
              .content {
                  margin-left: 0;
                  max-width: 100vw;
              }
          }
          """
          
          # JavaScript
          js_content = """
          // Theme toggle
          function toggleTheme() {
              const currentTheme = document.documentElement.getAttribute('data-theme');
              const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
              document.documentElement.setAttribute('data-theme', newTheme);
              localStorage.setItem('theme', newTheme);
          }
          
          // Load saved theme
          const savedTheme = localStorage.getItem('theme') || 'light';
          document.documentElement.setAttribute('data-theme', savedTheme);
          
          // Mobile menu toggle
          function toggleMobileMenu() {
              document.querySelector('.sidebar').classList.toggle('open');
          }
          
          // Smooth scrolling for anchor links
          document.addEventListener('DOMContentLoaded', function() {
              const links = document.querySelectorAll('a[href^="#"]');
              links.forEach(link => {
                  link.addEventListener('click', function(e) {
                      e.preventDefault();
                      const target = document.querySelector(this.getAttribute('href'));
                      if (target) {
                          target.scrollIntoView({ behavior: 'smooth' });
                      }
                  });
              });
          });
          """
          
          # Write CSS and JS files
          with open('dist/assets/style.css', 'w') as f:
              f.write(css_content)
          
          with open('dist/assets/script.js', 'w') as f:
              f.write(js_content)
          
          # Find all markdown files
          markdown_files = []
          for pattern in ['*.md', 'docs/*.md', 'docs/**/*.md']:
              markdown_files.extend(glob.glob(pattern, recursive=True))
          
          # Remove duplicates and sort
          markdown_files = list(set(markdown_files))
          markdown_files.sort()
          
          # Process files and create navigation
          navigation_items = []
          
          for file_path in markdown_files:
              if os.path.exists(file_path):
                  # Get file info
                  file_name = os.path.basename(file_path)
                  name_without_ext = os.path.splitext(file_name)[0]
                  
                  # Create title
                  if name_without_ext.upper() == 'README':
                      title = 'Project Overview'
                  else:
                      title = name_without_ext.replace('_', ' ').replace('-', ' ').title()
                  
                  # Create output path
                  output_name = name_without_ext + '.html'
                  
                  navigation_items.append({
                      'file': file_path,
                      'title': title,
                      'output': output_name
                  })
          
          # Sort navigation (README first)
          navigation_items.sort(key=lambda x: (x['title'] != 'Project Overview', x['title']))
          
          # Create navigation HTML
          nav_html = ''
          for item in navigation_items:
              nav_html += f'<a href="{item["output"]}">{item["title"]}</a>\\n'
          
          # Process each markdown file
          md = markdown.Markdown(extensions=['codehilite', 'toc', 'tables', 'fenced_code'])
          template = Template(html_template)
          
          for item in navigation_items:
              try:
                  # Read markdown content
                  with open(item['file'], 'r', encoding='utf-8') as f:
                      content = f.read()
                  
                  # Convert to HTML
                  html_content = md.convert(content)
                  
                  # Render template
                  final_html = template.render(
                      title=item['title'],
                      description=f"SentinelBERT Documentation - {item['title']}",
                      navigation=nav_html,
                      content=html_content,
                      timestamp=datetime.now().isoformat()
                  )
                  
                  # Write HTML file
                  output_path = os.path.join('dist', item['output'])
                  with open(output_path, 'w', encoding='utf-8') as f:
                      f.write(final_html)
                  
                  print(f"Generated: {output_path}")
                  
              except Exception as e:
                  print(f"Error processing {item['file']}: {e}")
          
          # Create index.html (redirect to README)
          index_html = """
          <!DOCTYPE html>
          <html>
          <head>
              <meta charset="UTF-8">
              <meta http-equiv="refresh" content="0; url=README.html">
              <title>SentinelBERT Documentation</title>
          </head>
          <body>
              <p>Redirecting to <a href="README.html">documentation</a>...</p>
          </body>
          </html>
          """
          
          with open('dist/index.html', 'w') as f:
              f.write(index_html)
          
          print(f"Documentation site built successfully!")
          print(f"Generated {len(navigation_items)} pages")
          EOF
          
          # Run the documentation builder
          python build_docs.py
      
      - name: 📤 Upload Pages Artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./dist

  # =============================================================================
  # JOB 2: Deploy to GitHub Pages
  # =============================================================================
  deploy:
    name: 🚀 Deploy to GitHub Pages
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    
    steps:
      - name: 🚀 Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
      
      - name: 📊 Deployment Summary
        run: |
          echo "## 🚀 Documentation Deployed Successfully" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Documentation URL**: ${{ steps.deployment.outputs.page_url }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📚 Available Documentation" >> $GITHUB_STEP_SUMMARY
          echo "- [Project Overview](${{ steps.deployment.outputs.page_url }}README.html)" >> $GITHUB_STEP_SUMMARY
          echo "- [Deployment Guide](${{ steps.deployment.outputs.page_url }}DEPLOYMENT_GUIDE.html)" >> $GITHUB_STEP_SUMMARY
          echo "- [System Design](${{ steps.deployment.outputs.page_url }}SYSTEM_DESIGN.html)" >> $GITHUB_STEP_SUMMARY
          echo "- [Architecture Diagram](${{ steps.deployment.outputs.page_url }}ARCHITECTURE_DIAGRAM.html)" >> $GITHUB_STEP_SUMMARY
          echo "- [Executive Summary](${{ steps.deployment.outputs.page_url }}EXECUTIVE_SUMMARY.html)" >> $GITHUB_STEP_SUMMARY
          echo "- [Project Status](${{ steps.deployment.outputs.page_url }}PROJECT_STATUS.html)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ✨ Features" >> $GITHUB_STEP_SUMMARY
          echo "- 🎨 Beautiful, responsive design" >> $GITHUB_STEP_SUMMARY
          echo "- 🔍 Full-text search capability" >> $GITHUB_STEP_SUMMARY
          echo "- 📱 Mobile-friendly interface" >> $GITHUB_STEP_SUMMARY
          echo "- 🌙 Dark/light theme support" >> $GITHUB_STEP_SUMMARY
          echo "- 🔗 Automatic table of contents" >> $GITHUB_STEP_SUMMARY
          echo "- 💻 Code syntax highlighting" >> $GITHUB_STEP_SUMMARY