# Enhanced Multi-stage build for SentinentalBERT with Viral Tracking
FROM python:3.11-slim as base

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PYTHONPATH=/app \
    DEBIAN_FRONTEND=noninteractive \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1

# Install system dependencies
RUN apt-get update && apt-get install -y \
    build-essential \
    curl \
    git \
    wget \
    unzip \
    libssl-dev \
    libffi-dev \
    libjpeg-dev \
    libpng-dev \
    libfreetype6-dev \
    pkg-config \
    vim \
    nano \
    htop \
    net-tools \
    procps \
    netcat-openbsd \
    && rm -rf /var/lib/apt/lists/*

# Create app directory and user
RUN useradd --create-home --shell /bin/bash app
WORKDIR /app

# Copy requirements first for better caching
COPY requirements.txt .

# Create enhanced requirements with additional packages (filter out built-in modules and problematic packages)
RUN grep -v -E '^(sqlite3|hashlib|uuid|pathlib|asyncio|smtplib|zipfile|tarfile|shutil|subprocess|os|sys|platform|tiktok-scraper|redoc)' requirements.txt > requirements.enhanced.txt && \
    echo "tweepy==4.16.0" >> requirements.enhanced.txt && \
    echo "networkx==3.5" >> requirements.enhanced.txt && \
    echo "python-dotenv==1.1.1" >> requirements.enhanced.txt && \
    echo "plotly==6.3.0" >> requirements.enhanced.txt && \
    echo "pandas==2.3.2" >> requirements.enhanced.txt && \
    echo "numpy==2.3.3" >> requirements.enhanced.txt && \
    echo "scipy==1.14.1" >> requirements.enhanced.txt && \
    echo "scikit-learn==1.5.2" >> requirements.enhanced.txt && \
    echo "requests==2.32.5" >> requirements.enhanced.txt && \
    echo "aiohttp==3.10.11" >> requirements.enhanced.txt && \
    echo "asyncio-throttle==1.0.2" >> requirements.enhanced.txt && \
    echo "python-dateutil==2.9.0.post0" >> requirements.enhanced.txt && \
    echo "pytz==2025.2" >> requirements.enhanced.txt && \
    echo "psycopg2-binary==2.9.10" >> requirements.enhanced.txt && \
    echo "redis==5.2.1" >> requirements.enhanced.txt && \
    echo "prometheus-client==0.21.1" >> requirements.enhanced.txt && \
    echo "structlog==24.4.0" >> requirements.enhanced.txt && \
    echo "python-json-logger==2.0.7" >> requirements.enhanced.txt

# Install Python dependencies
RUN pip install --no-cache-dir --upgrade pip setuptools wheel && \
    pip install --no-cache-dir -r requirements.enhanced.txt

# Download NLTK data
RUN python -c "import nltk; nltk.download('punkt'); nltk.download('stopwords'); nltk.download('vader_lexicon'); nltk.download('punkt_tab')" || true

# Copy application code
COPY . .

# Create necessary directories with proper structure
RUN mkdir -p \
    /app/logs \
    /app/evidence_storage \
    /app/temp_files \
    /app/models \
    /app/cache/nlp \
    /app/cache/huggingface \
    /app/cache/viral \
    /app/data/postgres \
    /app/data/redis \
    /app/data/elasticsearch \
    /app/data/prometheus \
    /app/data/grafana \
    /app/models/nlp \
    /app/models/viral \
    /app/evidence/signatures \
    /app/logs/backend

# Set proper permissions
RUN chmod +x /app/enhanced_viral_dashboard.py && \
    chmod +x /app/simple_demo_test.py && \
    chmod +x /app/quick_demo_test.py && \
    chmod +x /app/test_twitter_api.py && \
    chown -R app:app /app

# Create environment file with default values
RUN echo "# Enhanced SentinelBERT Environment Configuration" > /app/.env.enhanced && \
    echo "POSTGRES_PASSWORD=sentinelpass123" >> /app/.env.enhanced && \
    echo "REDIS_PASSWORD=redispass123" >> /app/.env.enhanced && \
    echo "ELASTIC_PASSWORD=elasticpass123" >> /app/.env.enhanced && \
    echo "JWT_SECRET=dev-jwt-secret-key-change-in-production-enhanced-2024" >> /app/.env.enhanced && \
    echo "GRAFANA_USER=admin" >> /app/.env.enhanced && \
    echo "GRAFANA_PASSWORD=admin123" >> /app/.env.enhanced && \
    echo "# Twitter API Credentials (Indian Police Hackathon)" >> /app/.env.enhanced && \
    echo "TWITTER_API_KEY=tkG3UCrcXhq1LCzC3n02mqg2N" >> /app/.env.enhanced && \
    echo "TWITTER_API_SECRET=oXRCjqTeJkV4KWrXFS5JO7ZIjcGGTHSNiUGStL0KIjSHmke90x" >> /app/.env.enhanced && \
    echo "TWITTER_ACCESS_TOKEN=835527957481459713-m4BKaUIuaAt2uQ6c2DITWDyoBcFxMAJ" >> /app/.env.enhanced && \
    echo "TWITTER_ACCESS_TOKEN_SECRET=B4C9XYaJOMuy7l3nq3Lo2h8FmoKV4TzkmnuqlDtlbveP1" >> /app/.env.enhanced && \
    echo "TWITTER_BEARER_TOKEN=AAAAAAAAAAAAAAAAAAAAAHsN4QEAAAAA8%2BZQa%2BzllARQxtAvmhCQsA0WQCs%3DpF9thH1ztd85xkbAsWZvubIgJ98edZ3z7BdA8q1vfkRHnBMd6B" >> /app/.env.enhanced && \
    chown app:app /app/.env.enhanced

# Switch to non-root user
USER app

# Health check for enhanced dashboard
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:12000/_stcore/health || curl -f http://localhost:8501/_stcore/health || exit 1

# Expose ports
EXPOSE 12000 12001 8501

# Create startup script
USER root
RUN cat > /app/start-enhanced.sh << 'EOF'
#!/bin/bash
set -e

echo "🚀 Starting Enhanced SentinelBERT Dashboard..."
echo "📅 $(date)"
echo "🔧 Environment: ${DEVELOPMENT_MODE:-production}"

# Wait for dependencies
echo "⏳ Waiting for dependencies..."
while ! nc -z postgres 5432; do
  echo "🔄 Waiting for PostgreSQL..."
  sleep 2
done

while ! nc -z redis 6379; do
  echo "🔄 Waiting for Redis..."
  sleep 2
done

while ! nc -z elasticsearch 9200; do
  echo "🔄 Waiting for Elasticsearch..."
  sleep 2
done

echo "✅ All dependencies are ready!"

# Test Twitter API connection
echo "🐦 Testing Twitter API connection..."
python test_twitter_api.py || echo "⚠️ Twitter API test failed, continuing..."

# Run database migrations if needed
echo "🗄️ Checking database schema..."
python -c "
import os
import psycopg2
try:
    conn = psycopg2.connect(os.environ.get('DATABASE_URL', 'postgresql://sentinel:sentinelpass123@postgres:5432/sentinelbert'))
    print('✅ Database connection successful')
    conn.close()
except Exception as e:
    print(f'⚠️ Database connection failed: {e}')
" || true

# Start the enhanced dashboard
echo "🎯 Starting Enhanced Viral Tracking Dashboard..."
echo "📊 Dashboard will be available at:"
echo "   - Primary: http://localhost:12000"
echo "   - Alternative: http://localhost:12001"
echo "   - Standard: http://localhost:8501"

exec streamlit run enhanced_viral_dashboard.py \
    --server.port=${STREAMLIT_SERVER_PORT:-12000} \
    --server.address=${STREAMLIT_SERVER_ADDRESS:-0.0.0.0} \
    --server.enableCORS=${STREAMLIT_SERVER_ENABLE_CORS:-true} \
    --server.enableXsrfProtection=${STREAMLIT_SERVER_ENABLE_XSRF_PROTECTION:-false} \
    --browser.gatherUsageStats=${STREAMLIT_BROWSER_GATHER_USAGE_STATS:-false} \
    --server.allowRunOnSave=${STREAMLIT_SERVER_ALLOW_RUN_ON_SAVE:-true} \
    --server.runOnSave=${STREAMLIT_SERVER_RUN_ON_SAVE:-true} \
    --server.headless=true \
    --server.fileWatcherType=poll
EOF

RUN chmod +x /app/start-enhanced.sh && chown app:app /app/start-enhanced.sh

# Switch back to app user
USER app

# Command to run the enhanced application
CMD ["/app/start-enhanced.sh"]