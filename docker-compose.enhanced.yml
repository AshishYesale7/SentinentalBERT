version: '3.8'

services:
  # Enhanced Streamlit Dashboard with Viral Tracking
  enhanced-dashboard:
    build:
      context: .
      dockerfile: Dockerfile.enhanced
      args:
        - BUILDKIT_INLINE_CACHE=1
    container_name: sentinelbert-enhanced-dashboard
    environment:
      # Application Configuration
      - PYTHONPATH=/app
      - STREAMLIT_SERVER_PORT=12000
      - STREAMLIT_SERVER_ADDRESS=0.0.0.0
      - STREAMLIT_SERVER_ENABLE_CORS=true
      - STREAMLIT_SERVER_ENABLE_XSRF_PROTECTION=false
      - STREAMLIT_BROWSER_GATHER_USAGE_STATS=false
      - STREAMLIT_SERVER_ALLOW_RUN_ON_SAVE=true
      - STREAMLIT_SERVER_RUN_ON_SAVE=true
      
      # Database Configuration
      - DATABASE_URL=postgresql://sentinel:${POSTGRES_PASSWORD:-sentinelpass123}@postgres:5432/sentinelbert
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redispass123}@redis:6379
      - ELASTIC_URL=http://elasticsearch:9200
      - ELASTIC_USERNAME=elastic
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD:-elasticpass123}
      
      # API Service URLs
      - NLP_SERVICE_URL=http://nlp-service:8000
      - BACKEND_SERVICE_URL=http://backend-service:8080
      - VIRAL_DETECTION_URL=http://viral-detection:8000
      - EVIDENCE_SERVICE_URL=http://evidence-service:8000
      
      # Social Media API Credentials (Enhanced Tracking)
      - TWITTER_API_KEY=${TWITTER_API_KEY:-tkG3UCrcXhq1LCzC3n02mqg2N}
      - TWITTER_API_SECRET=${TWITTER_API_SECRET:-oXRCjqTeJkV4KWrXFS5JO7ZIjcGGTHSNiUGStL0KIjSHmke90x}
      - TWITTER_ACCESS_TOKEN=${TWITTER_ACCESS_TOKEN:-835527957481459713-m4BKaUIuaAt2uQ6c2DITWDyoBcFxMAJ}
      - TWITTER_ACCESS_TOKEN_SECRET=${TWITTER_ACCESS_TOKEN_SECRET:-B4C9XYaJOMuy7l3nq3Lo2h8FmoKV4TzkmnuqlDtlbveP1}
      - TWITTER_BEARER_TOKEN=${TWITTER_BEARER_TOKEN:-AAAAAAAAAAAAAAAAAAAAAHsN4QEAAAAA8%2BZQa%2BzllARQxtAvmhCQsA0WQCs%3DpF9thH1ztd85xkbAsWZvubIgJ98edZ3z7BdA8q1vfkRHnBMd6B}
      - REDDIT_CLIENT_ID=${REDDIT_CLIENT_ID:-}
      - REDDIT_CLIENT_SECRET=${REDDIT_CLIENT_SECRET:-}
      - YOUTUBE_API_KEY=${YOUTUBE_API_KEY:-}
      
      # Enhanced Tracking Configuration
      - TRACKING_API_RATE_LIMIT=100
      - TRACKING_CONFIDENCE_THRESHOLD=0.7
      - TRACKING_MAX_CHAIN_LENGTH=50
      - TRACKING_TIMEOUT_SECONDS=30
      
      # Development Configuration
      - LOG_LEVEL=INFO
      - DEBUG_MODE=true
      - DEVELOPMENT_MODE=true
    
    volumes:
      # Mount source code for live development
      - .:/app
      - ./logs:/app/logs
      - ./evidence_storage:/app/evidence_storage
      - ./temp_files:/app/temp_files
      - ./models:/app/models
      # VSCode development support
      - ~/.vscode-server:/home/app/.vscode-server
      - ~/.gitconfig:/home/app/.gitconfig:ro
    
    ports:
      - "12000:12000"  # Enhanced Dashboard (Primary)
      - "12001:12001"  # Alternative port
      - "8501:8501"    # Standard Streamlit port
    
    networks:
      - sentinelbert-network
    
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    
    restart: unless-stopped
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:12000/_stcore/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    
    deploy:
      resources:
        limits:
          memory: 3G
          cpus: '2.0'
        reservations:
          memory: 1.5G
          cpus: '1.0'
    
    # Development labels
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dashboard.rule=Host(`localhost`)"
      - "traefik.http.services.dashboard.loadbalancer.server.port=12000"

  # PostgreSQL Database with Enhanced Schema
  postgres:
    image: postgres:15-alpine
    container_name: sentinelbert-postgres-enhanced
    environment:
      POSTGRES_DB: sentinelbert
      POSTGRES_USER: sentinel
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-sentinelpass123}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_enhanced_data:/var/lib/postgresql/data
      - ./sql:/docker-entrypoint-initdb.d:ro
      - ./sql/enhanced_tracking_schema.sql:/docker-entrypoint-initdb.d/02_enhanced_tracking.sql:ro
    ports:
      - "5432:5432"  # Exposed for development and external tools
    networks:
      - sentinelbert-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U sentinel -d sentinelbert"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Redis for Caching and Session Management
  redis:
    image: redis:7.2-alpine
    container_name: sentinelbert-redis-enhanced
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redispass123} --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_enhanced_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    ports:
      - "6379:6379"  # Exposed for development
    networks:
      - sentinelbert-network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-redispass123}", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Elasticsearch for Search and Analytics
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.10.0
    container_name: sentinelbert-elasticsearch-enhanced
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false  # Disabled for development
      - "ES_JAVA_OPTS=-Xms1g -Xmx2g"
      - bootstrap.memory_lock=true
      - cluster.name=sentinelbert-cluster
      - node.name=sentinelbert-node
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - elasticsearch_enhanced_data:/usr/share/elasticsearch/data
      - ./elasticsearch/config:/usr/share/elasticsearch/config:ro
    ports:
      - "9200:9200"  # REST API
      - "9300:9300"  # Transport
    networks:
      - sentinelbert-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health?wait_for_status=yellow&timeout=30s || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G

  # Enhanced NLP Service with Viral Detection
  nlp-service:
    build:
      context: ./services/nlp
      dockerfile: Dockerfile.enhanced
    container_name: sentinelbert-nlp-enhanced
    environment:
      - MODEL_PATH=/app/models
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redispass123}@redis:6379
      - DATABASE_URL=postgresql://sentinel:${POSTGRES_PASSWORD:-sentinelpass123}@postgres:5432/sentinelbert
      - LOG_LEVEL=INFO
      - PYTHONPATH=/app
      - CUDA_VISIBLE_DEVICES=${CUDA_VISIBLE_DEVICES:-}
      - TRANSFORMERS_CACHE=/app/cache/transformers
      - HF_HOME=/app/cache/huggingface
    volumes:
      - ./services/nlp:/app
      - nlp_models_enhanced:/app/models
      - nlp_cache_enhanced:/app/cache
      - huggingface_cache:/app/cache/huggingface
    ports:
      - "8000:8000"  # NLP API
    networks:
      - sentinelbert-network
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'

  # Enhanced Viral Detection Service
  viral-detection:
    build:
      context: ./services/viral_detection
      dockerfile: Dockerfile.enhanced
    container_name: sentinelbert-viral-enhanced
    environment:
      - DATABASE_URL=postgresql://sentinel:${POSTGRES_PASSWORD:-sentinelpass123}@postgres:5432/sentinelbert
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redispass123}@redis:6379
      - NLP_SERVICE_URL=http://nlp-service:8000
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - LOG_LEVEL=INFO
      - PYTHONPATH=/app
      # Enhanced tracking configuration
      - TRACKING_ALGORITHMS=reverse_chronological,network_traversal,hybrid_ai
      - MAX_TRACKING_DEPTH=10
      - CONFIDENCE_THRESHOLD=0.7
    volumes:
      - ./services/viral_detection:/app
      - viral_models:/app/models
      - viral_cache:/app/cache
    ports:
      - "8083:8000"  # Viral Detection API
    networks:
      - sentinelbert-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      nlp-service:
        condition: service_started
      elasticsearch:
        condition: service_healthy
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G

  # Evidence Collection Service
  evidence-service:
    build:
      context: ./services/evidence
      dockerfile: Dockerfile.enhanced
    container_name: sentinelbert-evidence-enhanced
    environment:
      - DATABASE_URL=postgresql://sentinel:${POSTGRES_PASSWORD:-sentinelpass123}@postgres:5432/sentinelbert
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redispass123}@redis:6379
      - STORAGE_PATH=/app/evidence_storage
      - LOG_LEVEL=INFO
      - PYTHONPATH=/app
      # Legal compliance configuration
      - EVIDENCE_RETENTION_DAYS=2555  # 7 years
      - CHAIN_OF_CUSTODY_ENABLED=true
      - DIGITAL_SIGNATURE_ENABLED=true
    volumes:
      - ./services/evidence:/app
      - ./evidence_storage:/app/evidence_storage
      - evidence_signatures:/app/signatures
    ports:
      - "8082:8000"  # Evidence API
    networks:
      - sentinelbert-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Backend API Service
  backend-service:
    build:
      context: ./services/backend
      dockerfile: Dockerfile.enhanced
    container_name: sentinelbert-backend-enhanced
    environment:
      - SPRING_PROFILES_ACTIVE=development,enhanced
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/sentinelbert
      - SPRING_DATASOURCE_USERNAME=sentinel
      - SPRING_DATASOURCE_PASSWORD=${POSTGRES_PASSWORD:-sentinelpass123}
      - SPRING_REDIS_HOST=redis
      - SPRING_REDIS_PASSWORD=${REDIS_PASSWORD:-redispass123}
      - SPRING_ELASTICSEARCH_URIS=http://elasticsearch:9200
      - NLP_SERVICE_URL=http://nlp-service:8000
      - VIRAL_DETECTION_URL=http://viral-detection:8000
      - EVIDENCE_SERVICE_URL=http://evidence-service:8000
      - JWT_SECRET=${JWT_SECRET:-dev-jwt-secret-key-change-in-production-enhanced-2024}
      - LOG_LEVEL=INFO
      # Enhanced features
      - ENHANCED_TRACKING_ENABLED=true
      - REAL_TIME_PROCESSING_ENABLED=true
      - COURT_READY_REPORTS_ENABLED=true
    volumes:
      - ./services/backend:/app
      - backend_logs:/app/logs
    ports:
      - "8080:8080"  # Backend API
    networks:
      - sentinelbert-network
    depends_on:
      postgres:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
      redis:
        condition: service_healthy
      nlp-service:
        condition: service_started
      viral-detection:
        condition: service_started
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G

  # Development Tools and Utilities
  adminer:
    image: adminer:latest
    container_name: sentinelbert-adminer-enhanced
    environment:
      - ADMINER_DEFAULT_SERVER=postgres
      - ADMINER_DESIGN=pepa-linha
    ports:
      - "8084:8080"  # Database admin interface
    networks:
      - sentinelbert-network
    depends_on:
      - postgres
    restart: unless-stopped

  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: sentinelbert-redis-commander-enhanced
    environment:
      - REDIS_HOSTS=local:redis:6379:0:${REDIS_PASSWORD:-redispass123}
      - HTTP_USER=${REDIS_COMMANDER_USER:-admin}
      - HTTP_PASSWORD=${REDIS_COMMANDER_PASSWORD:-admin123}
    ports:
      - "8085:8081"  # Redis admin interface
    networks:
      - sentinelbert-network
    depends_on:
      - redis
    restart: unless-stopped

  # Elasticsearch Head for ES management
  elasticsearch-head:
    image: mobz/elasticsearch-head:5
    container_name: sentinelbert-es-head-enhanced
    ports:
      - "9100:9100"  # Elasticsearch Head UI
    networks:
      - sentinelbert-network
    depends_on:
      - elasticsearch
    restart: unless-stopped

  # Enhanced Monitoring Stack
  prometheus:
    image: prom/prometheus:latest
    container_name: sentinelbert-prometheus-enhanced
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=168h'  # 7 days for development
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    volumes:
      - ./monitoring/prometheus.enhanced.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/rules:/etc/prometheus/rules:ro
      - prometheus_enhanced_data:/prometheus
    ports:
      - "9090:9090"  # Prometheus UI
    networks:
      - sentinelbert-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  grafana:
    image: grafana/grafana:latest
    container_name: sentinelbert-grafana-enhanced
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource,grafana-worldmap-panel
      - GF_FEATURE_TOGGLES_ENABLE=ngalert
    volumes:
      - grafana_enhanced_data:/var/lib/grafana
      - ./monitoring/grafana/enhanced:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    ports:
      - "3000:3000"  # Grafana UI
    networks:
      - sentinelbert-network
    depends_on:
      - prometheus
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Jaeger for Distributed Tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: sentinelbert-jaeger-enhanced
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - COLLECTOR_ZIPKIN_HOST_PORT=:9411
    ports:
      - "16686:16686"  # Jaeger UI
      - "14268:14268"  # Jaeger collector HTTP
      - "14250:14250"  # Jaeger collector gRPC
      - "9411:9411"    # Zipkin collector
    networks:
      - sentinelbert-network
    restart: unless-stopped

  # Nginx Reverse Proxy with Load Balancing
  nginx:
    image: nginx:alpine
    container_name: sentinelbert-nginx-enhanced
    volumes:
      - ./nginx/nginx.enhanced.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx
    ports:
      - "80:80"    # HTTP
      - "443:443"  # HTTPS
    depends_on:
      - enhanced-dashboard
      - backend-service
    networks:
      - sentinelbert-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Log Aggregation
  fluentd:
    build:
      context: ./monitoring/fluentd
      dockerfile: Dockerfile
    container_name: sentinelbert-fluentd-enhanced
    volumes:
      - ./monitoring/fluentd/conf:/fluentd/etc
      - ./logs:/var/log/sentinelbert
    ports:
      - "24224:24224"  # Fluentd forward
      - "24224:24224/udp"
    networks:
      - sentinelbert-network
    restart: unless-stopped

volumes:
  # Database volumes
  postgres_enhanced_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/postgres
  
  redis_enhanced_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/redis
  
  elasticsearch_enhanced_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/elasticsearch
  
  # Application volumes
  nlp_models_enhanced:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./models/nlp
  
  nlp_cache_enhanced:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./cache/nlp
  
  huggingface_cache:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./cache/huggingface
  
  viral_models:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./models/viral
  
  viral_cache:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./cache/viral
  
  evidence_signatures:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./evidence/signatures
  
  backend_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./logs/backend
  
  # Monitoring volumes
  prometheus_enhanced_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/prometheus
  
  grafana_enhanced_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/grafana

networks:
  sentinelbert-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.22.0.0/16
          gateway: 172.22.0.1
    driver_opts:
      com.docker.network.bridge.name: sentinelbert-enhanced
      com.docker.network.bridge.enable_icc: "true"
      com.docker.network.bridge.enable_ip_masquerade: "true"
      com.docker.network.driver.mtu: 1500