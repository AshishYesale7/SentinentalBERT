{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\n\n// Test JWT token for demo purposes\nconst TEST_JWT_TOKEN = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJvZmZpY2VyX2lkIjoidGVzdF91c2VyIiwicm9sZSI6ImFkbWluIiwicGVybWlzc2lvbnMiOlsibmxwOmFuYWx5emUiLCJubHA6c2VudGltZW50Iiwidmlld19yZXBvcnRzIiwiYWRtaW4iXSwiZXhwIjoxNzU4Njg3Njk4fQ.foU1cbemulfazsFFmjwnzROcV9FBN-7pLE7PU3MRgX8';\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n    'Authorization': `Bearer ${TEST_JWT_TOKEN}`\n  }\n});\nexport const apiService = {\n  // Health check\n  async getHealth() {\n    const response = await api.get('/health');\n    return response.data;\n  },\n  // Analyze texts with full analysis\n  async analyzeTexts(texts) {\n    const response = await api.post('/analyze', {\n      texts\n    });\n    return response.data;\n  },\n  // Analyze sentiment only\n  async analyzeSentiment(texts) {\n    const response = await api.post('/analyze/sentiment', {\n      texts\n    });\n    return response.data;\n  },\n  // Get model information\n  async getModels() {\n    const response = await api.get('/models');\n    return response.data;\n  },\n  // Get metrics\n  async getMetrics() {\n    const response = await api.get('/metrics');\n    return response.data;\n  }\n};\nexport default apiService;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","TEST_JWT_TOKEN","api","create","baseURL","headers","apiService","getHealth","response","get","data","analyzeTexts","texts","post","analyzeSentiment","getModels","getMetrics"],"sources":["/workspace/project/SentinentalBERT/frontend/src/services/api.ts"],"sourcesContent":["import axios from 'axios';\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\n\n// Test JWT token for demo purposes\nconst TEST_JWT_TOKEN = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJvZmZpY2VyX2lkIjoidGVzdF91c2VyIiwicm9sZSI6ImFkbWluIiwicGVybWlzc2lvbnMiOlsibmxwOmFuYWx5emUiLCJubHA6c2VudGltZW50Iiwidmlld19yZXBvcnRzIiwiYWRtaW4iXSwiZXhwIjoxNzU4Njg3Njk4fQ.foU1cbemulfazsFFmjwnzROcV9FBN-7pLE7PU3MRgX8';\n\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n    'Authorization': `Bearer ${TEST_JWT_TOKEN}`,\n  },\n});\n\nexport interface SentimentResult {\n  positive: number;\n  negative: number;\n  neutral: number;\n  confidence: number;\n}\n\nexport interface BehavioralPattern {\n  pattern_type: string;\n  score: number;\n  confidence: number;\n  indicators: string[];\n}\n\nexport interface AnalysisResult {\n  text_id: number;\n  sentiment: SentimentResult;\n  behavioral_patterns: BehavioralPattern[];\n  influence_score: number;\n  language: string;\n  processing_time_ms: number;\n}\n\nexport interface BatchAnalysisResponse {\n  results: AnalysisResult[];\n  total_processing_time_ms: number;\n  model_version: string;\n  cache_hits: number;\n  cache_misses: number;\n}\n\nexport interface HealthResponse {\n  status: string;\n  model_loaded: boolean;\n  gpu_available: boolean;\n  memory_usage_mb: number;\n  active_requests: number;\n}\n\nexport const apiService = {\n  // Health check\n  async getHealth(): Promise<HealthResponse> {\n    const response = await api.get('/health');\n    return response.data;\n  },\n\n  // Analyze texts with full analysis\n  async analyzeTexts(texts: string[]): Promise<BatchAnalysisResponse> {\n    const response = await api.post('/analyze', { texts });\n    return response.data;\n  },\n\n  // Analyze sentiment only\n  async analyzeSentiment(texts: string[]): Promise<{ results: SentimentResult[]; model_version: string }> {\n    const response = await api.post('/analyze/sentiment', { texts });\n    return response.data;\n  },\n\n  // Get model information\n  async getModels(): Promise<any> {\n    const response = await api.get('/models');\n    return response.data;\n  },\n\n  // Get metrics\n  async getMetrics(): Promise<any> {\n    const response = await api.get('/metrics');\n    return response.data;\n  },\n};\n\nexport default apiService;"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,uBAAuB;;AAE7E;AACA,MAAMC,cAAc,GAAG,6PAA6P;AAEpR,MAAMC,GAAG,GAAGN,KAAK,CAACO,MAAM,CAAC;EACvBC,OAAO,EAAEP,YAAY;EACrBQ,OAAO,EAAE;IACP,cAAc,EAAE,kBAAkB;IAClC,eAAe,EAAE,UAAUJ,cAAc;EAC3C;AACF,CAAC,CAAC;AAyCF,OAAO,MAAMK,UAAU,GAAG;EACxB;EACA,MAAMC,SAASA,CAAA,EAA4B;IACzC,MAAMC,QAAQ,GAAG,MAAMN,GAAG,CAACO,GAAG,CAAC,SAAS,CAAC;IACzC,OAAOD,QAAQ,CAACE,IAAI;EACtB,CAAC;EAED;EACA,MAAMC,YAAYA,CAACC,KAAe,EAAkC;IAClE,MAAMJ,QAAQ,GAAG,MAAMN,GAAG,CAACW,IAAI,CAAC,UAAU,EAAE;MAAED;IAAM,CAAC,CAAC;IACtD,OAAOJ,QAAQ,CAACE,IAAI;EACtB,CAAC;EAED;EACA,MAAMI,gBAAgBA,CAACF,KAAe,EAAkE;IACtG,MAAMJ,QAAQ,GAAG,MAAMN,GAAG,CAACW,IAAI,CAAC,oBAAoB,EAAE;MAAED;IAAM,CAAC,CAAC;IAChE,OAAOJ,QAAQ,CAACE,IAAI;EACtB,CAAC;EAED;EACA,MAAMK,SAASA,CAAA,EAAiB;IAC9B,MAAMP,QAAQ,GAAG,MAAMN,GAAG,CAACO,GAAG,CAAC,SAAS,CAAC;IACzC,OAAOD,QAAQ,CAACE,IAAI;EACtB,CAAC;EAED;EACA,MAAMM,UAAUA,CAAA,EAAiB;IAC/B,MAAMR,QAAQ,GAAG,MAAMN,GAAG,CAACO,GAAG,CAAC,UAAU,CAAC;IAC1C,OAAOD,QAAQ,CAACE,IAAI;EACtB;AACF,CAAC;AAED,eAAeJ,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}