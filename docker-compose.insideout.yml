services:
  # Enhanced PostgreSQL with PostGIS for geographic data
  postgres:
    image: postgis/postgis:15-3.3
    container_name: insideout-postgres
    environment:
      POSTGRES_DB: insideout
      POSTGRES_USER: insideout
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-insideout_secure_2024}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./sql/insideout_schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
      - ./sql/sample_data.sql:/docker-entrypoint-initdb.d/02-sample-data.sql
    ports:
      - "5432:5432"
    networks:
      - insideout-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U insideout -d insideout"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis for caching and message queuing
  redis:
    image: redis:7.2-alpine
    container_name: insideout-redis
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis_secure_2024}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - insideout-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # ElasticSearch for full-text search
  elasticsearch:
    image: elasticsearch:8.10.4
    container_name: insideout-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms2g -Xmx2g"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - insideout-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Neo4j for graph analysis
  neo4j:
    image: neo4j:5.12
    container_name: insideout-neo4j
    environment:
      NEO4J_AUTH: neo4j/${NEO4J_PASSWORD:-neo4j_secure_2024}
      NEO4J_PLUGINS: '["graph-data-science"]'
      NEO4J_dbms_memory_heap_initial__size: 1G
      NEO4J_dbms_memory_heap_max__size: 2G
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
    ports:
      - "7474:7474"
      - "7687:7687"
    networks:
      - insideout-network
    healthcheck:
      test: ["CMD-SHELL", "cypher-shell -u neo4j -p ${NEO4J_PASSWORD:-neo4j_secure_2024} 'RETURN 1'"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Enhanced Ingestion Service (Rust)
  ingestion-service:
    build: 
      context: ./services/ingestion
      dockerfile: Dockerfile
    container_name: insideout-ingestion
    environment:
      - RUST_LOG=info
      - DATABASE_URL=postgresql://insideout:${POSTGRES_PASSWORD:-insideout_secure_2024}@postgres:5432/insideout
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_secure_2024}@redis:6379
      - VIRAL_DETECTION_ENABLED=true
      - PROVENANCE_TRACKING=true
      - TWITTER_BEARER_TOKEN=${TWITTER_BEARER_TOKEN}
      - REDDIT_CLIENT_ID=${REDDIT_CLIENT_ID}
      - REDDIT_CLIENT_SECRET=${REDDIT_CLIENT_SECRET}
      - YOUTUBE_API_KEY=${YOUTUBE_API_KEY}
      - INSTAGRAM_ACCESS_TOKEN=${INSTAGRAM_ACCESS_TOKEN}
    volumes:
      - ingestion_data:/data
      - ingestion_logs:/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - insideout-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8081/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Enhanced NLP Service with Viral Detection
  nlp-service:
    build:
      context: ./services/nlp
      dockerfile: Dockerfile
    environment:
      - PYTHONPATH=/app
      - DATABASE_URL=postgresql://insideout:${POSTGRES_PASSWORD:-insideout_secure_2024}@postgres:5432/insideout
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_secure_2024}@redis:6379
      - BERT_MODEL=bert-base-multilingual-cased
      - VIRAL_SIMILARITY_THRESHOLD=0.85
      - LANGUAGE_DETECTION=true
      - CUDA_VISIBLE_DEVICES=${CUDA_VISIBLE_DEVICES:-}
    volumes:
      - nlp_models:/app/models
      - nlp_logs:/app/logs
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - insideout-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Viral Detection Service
  viral-detection-service:
    build:
      context: ./services/viral_detection
      dockerfile: Dockerfile
    container_name: insideout-viral-detection
    environment:
      - PYTHONPATH=/app
      - DATABASE_URL=postgresql://insideout:${POSTGRES_PASSWORD:-insideout_secure_2024}@postgres:5432/insideout
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_secure_2024}@redis:6379
      - SIMILARITY_THRESHOLD=0.85
      - MIN_CLUSTER_SIZE=2
      - CUDA_VISIBLE_DEVICES=${CUDA_VISIBLE_DEVICES:-}
    volumes:
      - viral_models:/app/models
      - viral_logs:/app/logs
    ports:
      - "8001:8001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      nlp-service:
        condition: service_healthy
    networks:
      - insideout-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8001/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Evidence Management Service
  evidence-service:
    build:
      context: ./services/evidence
      dockerfile: Dockerfile
    container_name: insideout-evidence
    environment:
      - PYTHONPATH=/app
      - DATABASE_URL=postgresql://insideout:${POSTGRES_PASSWORD:-insideout_secure_2024}@postgres:5432/insideout
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_secure_2024}@redis:6379
      - ENCRYPTION_KEY_ID=${ENCRYPTION_KEY_ID:-key-001}
      - BLOCKCHAIN_ENDPOINT=${BLOCKCHAIN_ENDPOINT:-http://blockchain:8545}
      - LEGAL_AUTHORITY_API=${LEGAL_AUTHORITY_API:-http://court-system:8080}
    volumes:
      - evidence_data:/app/data
      - evidence_logs:/app/logs
    ports:
      - "8002:8002"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - insideout-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8002/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Enhanced Backend Service (Spring Boot)
  backend-service:
    build:
      context: ./services/backend
      dockerfile: Dockerfile
    container_name: insideout-backend
    environment:
      - SPRING_PROFILES_ACTIVE=production
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/insideout
      - SPRING_DATASOURCE_USERNAME=insideout
      - SPRING_DATASOURCE_PASSWORD=${POSTGRES_PASSWORD:-insideout_secure_2024}
      - SPRING_REDIS_HOST=redis
      - SPRING_REDIS_PASSWORD=${REDIS_PASSWORD:-redis_secure_2024}
      - ELASTICSEARCH_HOST=elasticsearch
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USERNAME=neo4j
      - NEO4J_PASSWORD=${NEO4J_PASSWORD:-neo4j_secure_2024}
      - JWT_SECRET=${JWT_SECRET:-insideout_jwt_secret_2024}
      - VIRAL_DETECTION_SERVICE_URL=http://viral-detection-service:8001
      - EVIDENCE_SERVICE_URL=http://evidence-service:8002
      - NLP_SERVICE_URL=http://nlp-service:8000
    volumes:
      - backend_logs:/app/logs
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
      viral-detection-service:
        condition: service_healthy
      evidence-service:
        condition: service_healthy
    networks:
      - insideout-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/actuator/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Indian Police Dashboard (React)
  dashboard:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - REACT_APP_API_BASE_URL=http://localhost:8080/api
        - REACT_APP_THEME=indian-police
        - REACT_APP_DEFAULT_LANGUAGE=hi
        - REACT_APP_MAPS_API_KEY=${GOOGLE_MAPS_API_KEY}
        - REACT_APP_SUPPORTED_LANGUAGES=hi,en,ta,te,bn,mr,gu
    container_name: insideout-dashboard
    volumes:
      - dashboard_logs:/var/log/nginx
    ports:
      - "3000:80"
    depends_on:
      backend-service:
        condition: service_healthy
    networks:
      - insideout-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:80/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:v2.47.0
    container_name: insideout-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - insideout-network
    restart: unless-stopped

  # Grafana for visualization
  grafana:
    image: grafana/grafana:10.1.0
    container_name: insideout-grafana
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    ports:
      - "3001:3000"
    depends_on:
      - prometheus
    networks:
      - insideout-network
    restart: unless-stopped

  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:1.49
    container_name: insideout-jaeger
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    ports:
      - "16686:16686"
      - "14268:14268"
    networks:
      - insideout-network
    restart: unless-stopped

  # Nginx reverse proxy
  nginx:
    image: nginx:1.25-alpine
    container_name: insideout-nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - nginx_logs:/var/log/nginx
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - dashboard
      - backend-service
    networks:
      - insideout-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  elasticsearch_data:
    driver: local
  neo4j_data:
    driver: local
  neo4j_logs:
    driver: local
  ingestion_data:
    driver: local
  ingestion_logs:
    driver: local
  nlp_models:
    driver: local
  nlp_logs:
    driver: local
  viral_models:
    driver: local
  viral_logs:
    driver: local
  evidence_data:
    driver: local
  evidence_logs:
    driver: local
  backend_logs:
    driver: local
  dashboard_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  nginx_logs:
    driver: local

networks:
  insideout-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16